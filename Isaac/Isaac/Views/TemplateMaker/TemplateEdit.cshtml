@model Isaac.Models.Template

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_AppLayout.cshtml";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Template</h4>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.TemplateTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TemplateTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TemplateTitle, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group" style="display:none">
            @Html.LabelFor(model => model.TemplateID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TemplateID, new { htmlAttributes = new { @class = "form-control",@Value = ViewBag.TemplateId } })
                @Html.ValidationMessageFor(model => model.TemplateID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AuthorName, "AuthorName", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("AuthorName", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AuthorName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryId, "CategoryId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Context, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(m => m.Context, 15, 20, new RouteValueDictionary(new { @class = "form-control", id = "Textarea" }))
                <button type="button" ng-click="QuestionButton()" id="question">Question</button>

                @Html.ValidationMessageFor(model => model.Context, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.TemplateSubject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TemplateSubject, new { htmlAttributes = new { @class = "form-control", id = "subjectquestion" } })
                @Html.ValidationMessageFor(model => model.TemplateSubject, "", new { @class = "text-danger" })
                <button type="button" ng-click="QuestionButton()" id="question2">Question</button>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TemplateDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(m => m.TemplateDescription, 15, 20, new RouteValueDictionary(new { @class = "form-control", id = "Textarea" }))
                @Html.ValidationMessageFor(model => model.TemplateDescription, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Apply" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "TemplateCreater", new { id = ViewBag.CatID })
</div>

<script type="text/javascript">
    const questionInsert = ' [question] ';

    function typeInTextarea(el, newText) {
        var start = el.prop("selectionStart")
        var end = el.prop("selectionEnd")
        var text = el.val()
        var before = text.substring(0, start)
        var after = text.substring(end, text.length)
        el.val(before + newText + after)
        el[0].selectionStart = el[0].selectionEnd = start + newText.length
        el.focus()
    }

    $('#question').on('click', function () {
        typeInTextarea($("#Textarea"), questionInsert);
    });

    $('#question2').on('click', function () {
        typeInTextarea($("#subjectquestion"), questionInsert);
    });


</script>