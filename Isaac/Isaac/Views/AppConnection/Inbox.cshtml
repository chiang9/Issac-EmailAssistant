
@{
    Layout = "~/Views/Shared/_AppLayout.cshtml";
}
<link href="~/Content/Inbox.css" rel="stylesheet" />
<link href="https://cdn.datatables.net/1.10.11/css/jquery.dataTables.min.css" rel="stylesheet" />

<h2>Inbox</h2>
<body>
    <script src="//cdn.tinymce.com/4/tinymce.min.js"></script>
    <script>
        tinymce.init({ selector: '#reply-message' });

    </script>

    <div class="container">
        <button id="authorize-button" class="btn btn-primary hidden">Login</button>
        <div id="loading_holder">
            Loading...
        </div>

        <table class="table table-striped table-inbox hidden display" id="tableid">
            <thead>
                <tr>
                    <th>From</th>
                    <th>Subject</th>
                    <th>Date/Time</th>
                </tr>
            </thead>
            <tbody id="tablebody"></tbody>
        </table>
    </div>


    <div class="modal fade" id="reply-modal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Reply</h4>
                </div>
                <form onsubmit="return sendReply();" name="myform" novalidate>
                    <input type="hidden" id="reply-message-id" />

                    <div class="modal-body">
                        <div class="form-group">
                            <input type="text" class="form-control" id="reply-to" disabled />
                        </div>

                        <div class="form-group">
                            <input type="text" class="form-control disabled" id="reply-subject" />
                        </div>

                        <div class="form-group">
                            <textarea class="form-control" id="reply-message" placeholder="Message" rows="20" required></textarea>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <!--<button type="button" id="template" class="btn btn-default" data-dismiss="modal">Template</button>-->
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="submit" id="reply-button" class="btn btn-primary">Send</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.11/js/jquery.dataTables.min.js"></script>
    <script src="~/Scripts/paging.js"></script>
    <script src="~/Scripts/Blob.js-master/Blob.js"></script>
    <script src="~/Scripts/FileSaver.js-master/FileSaver.js"></script>


    <script type="text/javascript">

        var Name =  @Html.Raw(Json.Encode(ViewBag.Name));
        var Company =  @Html.Raw(Json.Encode(ViewBag.Company));
        var Country =  @Html.Raw(Json.Encode(ViewBag.Country));
        var JobTitle =  @Html.Raw(Json.Encode(ViewBag.JobTitle));
        var Tel =  @Html.Raw(Json.Encode(ViewBag.Tel));

        var To = sessionStorage.getItem("To");
        var Subject = sessionStorage.getItem("Subject");
        var Content = sessionStorage.getItem("Content");
        var emailId = null;

        var emailCount = 0;                                 // use for pagination
        var inboxmailCount = 0;

        var clientId = '149346526257-mm1str5bj0hemtu6f44itcheia8bdp1n.apps.googleusercontent.com';
        var apiKey = 'AIzaSyAMvrO8gDr1cMOYhXmsvtwEP4K1ICRzAhU';
        var scopes =
          'https://www.googleapis.com/auth/gmail.readonly ' +
          'https://www.googleapis.com/auth/gmail.send';


        function handleClientLoad() {
            gapi.client.setApiKey(apiKey);
            window.setTimeout(checkAuth, 1);
        }

        function checkAuth() {
            gapi.auth.authorize({
                client_id: clientId,
                scope: scopes,
                immediate: true
            }, handleAuthResult);
        }

        function handleAuthClick() {
            gapi.auth.authorize({
                client_id: clientId,
                scope: scopes,
                immediate: false
            }, handleAuthResult);
            return false;
        }

        function handleAuthResult(authResult) {
            if (authResult && !authResult.error) {
                loadGmailApi();
                $('#authorize-button').remove();
                $('.table-inbox').removeClass("hidden");
                $('#compose-button').removeClass("hidden");
            } else {
                $('#authorize-button').removeClass("hidden");
                $('#authorize-button').on('click', function () {
                    handleAuthClick();
                });
            }
        }

        function loadGmailApi() {
            gapi.client.load('gmail', 'v1', displayInbox);

        }

        function displayInbox() {
            var trequest = gapi.client.gmail.users.getProfile({ 'userId': 'me' });
            trequest.execute(function (res) {
                emailId = res.emailAddress;
                var i = 0;
                for (i; i < emailId.length; i++) {
                    if (emailId.substring(i, i+5) == "gmail") {
                        emailId = emailId.substring(0, i-1);
                    }
                }
                while (emailId.includes(".")) {
                    emailId = emailId.replace(".", "_");
                }
            });

            var request = gapi.client.gmail.users.messages.list({
                'userId': 'me',
                'labelIds': 'INBOX',

            });
            request.execute(function (response) {
                $.each(response.messages, function () {
                    var messageRequest = gapi.client.gmail.users.messages.get({
                        'userId': 'me',
                        'id': this.id
                    });
                    messageRequest.execute(appendMessageRow);
                    emailCount++;
                });

            });

        }


        function paging() {
            $(document).ready(function () {
                $('#tableid').DataTable({
                    "pagingType": "full_numbers"
                });
            });
            var table = $('#tableid').DataTable();
            table.column('2:visible')
                .order('desc')
                .draw();
        }



        function appendMessageRow(message) {
            $('.table-inbox tbody').append(
              '<tr>\
            <td>'+ getHeader(message.payload.headers, 'From') + '</td>\
            <td>\
              <a href="#message-modal-' + message.id +
                    '" data-toggle="modal" id="message-link-' + message.id + '">' +
                    getHeader(message.payload.headers, 'Subject') +
                  '</a>\
            </td>\
            <td>'+ getHeader(message.payload.headers, 'Date') + '</td>\
          </tr>'
            );


            var reply_to = (getHeader(message.payload.headers, 'Reply-to') !== '' ?
              getHeader(message.payload.headers, 'Reply-to') :
              getHeader(message.payload.headers, 'From')).replace(/\"/g, '&quot;');

            var reply_subject = 'Re: ' + getHeader(message.payload.headers, 'Subject').replace(/\"/g, '&quot;');
            $('body').append(
              '<div class="modal fade" id="message-modal-' + message.id +
                  '" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">\
            <div class="modal-dialog modal-lg">\
              <div class="modal-content">\
                <div class="modal-header">\
                  <button type="button"\
                          class="close"\
                          data-dismiss="modal"\
                          aria-label="Close">\
                    <span aria-hidden="true">&times;</span></button>\
                  <h4 class="modal-title" id="myModalLabel">' +
                        getHeader(message.payload.headers, 'Subject') +
                      '</h4>' +
                       getAttachmentHeaders(message) +
                '</div>\
                <div class="modal-body">\
                  <iframe width="100%" height="400" align="middle" id="message-iframe-'+ message.id + '" srcdoc="<p>Loading.........................</p>">\
                  </iframe>\
                </div>\
                <div class="modal-footer">\
                  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\
                  <button type="button" class="btn btn-primary reply-button" data-dismiss="modal" data-toggle="modal" data-target="#reply-modal"\
                  onclick="fillInReply(\
                    \''+ reply_to + '\', \
                    \''+ reply_subject + '\', \
                    \''+ getHeader(message.payload.headers, 'Message-ID') + '\'\
                    );"\
                  >Reply</button>\
                </div>\
              </div>\
            </div>\
          </div>'
            );
            $('#message-link-' + message.id).on('click', function () {
                var ifrm = $('#message-iframe-' + message.id)[0].contentWindow.document;
                $('body', ifrm).html(getBody(message.payload));
            });

            // pagination
            inboxmailCount += 1;
            if (inboxmailCount == emailCount) { 
                paging();
                document.getElementById('tableid').style.display = "inline";
                document.getElementById('loading_holder').style.display = "none";
            } else {
                document.getElementById('tableid').style.display = "none";
                document.getElementById('loading_holder').style.display = "inline";
            }

        }

        function downloadAttachment(messageId, attachId, ftype, filename) {
            var encodedBody = '';
            var request = gapi.client.gmail.users.messages.attachments.get({
                'id': attachId,
                'messageId': messageId,
                'userId': 'me'
            });
            request.execute(function (attachment) {
                encodedBody = attachment.data;
                encodedBody = encodedBody.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');

                var blob = b64toBlob(encodedBody, ftype, 512);
                saveAs(blob, filename);

            });
        }


        function b64toBlob(b64Data, contentType, sliceSize) {
            contentType = contentType || '';
            sliceSize = sliceSize || 512;

            var byteCharacters = atob(b64Data);
            var byteArrays = [];

            for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                var slice = byteCharacters.slice(offset, offset + sliceSize);

                var byteNumbers = new Array(slice.length);
                for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                }

                var byteArray = new Uint8Array(byteNumbers);

                byteArrays.push(byteArray);
            }

            var blob = new Blob(byteArrays, { type: contentType });
            return blob;
        }



        function getAttachmentHeaders(message) {
            var result = '';

            if (typeof message.payload.parts === 'undefined') {
                return result;
            }

            var parts = message.payload.parts;
            for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                if (part.filename && part.filename.length > 0) {
                    result += '<a href ="#"  onclick="downloadAttachment(\
                    \''+ message.id + '\', \
                    \'' + part.body.attachmentId + '\', \
                    \'' + part.mimeType + '\', \
                    \''+ part.filename + '\'\
                    );"\
                  >' + part.filename +'</a><br/>';
                }
            }
            return result;
        }

        function sendReply() {
            $('#reply-button').addClass('disabled');

            sendMessage(
              {
                  'To': $('#reply-to').val(),
                  'Subject': $('#reply-subject').val(),
                  'In-Reply-To': $('#reply-message-id').val()
              },
              tinyMCE.activeEditor.getContent({ format: 'text' }),
              tinyMCE.activeEditor.getContent({ format: 'html' }),
              replyTidy
            );

            return false;
        }

        function replyTidy() {
            $('#reply-modal').modal('hide');

            tinyMCE.activeEditor.setContent('');
            $('#reply-button').removeClass('disabled');
        }

        function fillInReply(to, subject, message_id) {
            $('#reply-to').val(to);
            $('#reply-subject').val(subject);
            $('#reply-message-id').val(message_id);
        }

        function sendMessage(headers_obj, message, messageHTML, callback) {
            gapi.client.load('gmail', 'v1', function () {

                var mail =
                'Content-Type: multipart/mixed; boundary="foo_bar_baz"\n' +
                'MIME-Version: 1.0\n' +
                'to: ' + headers_obj['To'] + '\n' +
                'In-Reply-To: ' + headers_obj['In-Reply-To']+'\n'+
                'subject: ' + headers_obj['Subject'] + '\n\n' +

                '--foo_bar_baz\n' +
                'Content-Type: multipart/alternative; boundary="html_boundry"\n\n' +
                '--html_boundry\n' +
                'Content-Type: text/plain; charset="UTF-8"\n' +
                'MIME-Version: 1.0\n' +
                'Content-Transfer-Encoding: 7bit\n\n' +
                 '\n\n' +                                                             // text area
                 '--html_boundry\n' +
                 'Content-Type: text/html; charset=UTF-8\n\n' +
                 messageHTML + '\n\n' +
                 '--html_boundry--\n' +
                 '--foo_bar_baz\n';

                  mail += '--foo_bar_baz--\n\n';


                var encode64Mail = window.btoa(mail).replace(/\+/g, '-').replace(/\//g, '_');

                var sendRequest = gapi.client.gmail.users.messages.send({
                    'userId': 'me',
                    'resource': {
                        'raw': encode64Mail

                    }
                });

                return sendRequest.execute(callback);
            });

        }

        function dateTransfer(val) {
            var months = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"];
            var result = "system error";

            var year = 0;
            var mon;
            var day = 0;          //index
            var d = 0;
            var i = 0;

            // day
            var encounterNum = 0;
            for (d = 0; d < 31; d++) {
                if (!isNaN(val.charAt(d))) {
                    if (val.charAt(d) == ' ') {

                    } else if (day == 0 && encounterNum == 0) {
                            day = val.charAt(d);
                        } else {
                            day = day + val.charAt(d);
                        }
                    encounterNum = 1;
                } else if (encounterNum == 1) {
                    encounterNum = 0;
                    break;
                }
            }

            for (i = 0; i < 13; i++) {
                if (val.substring(d, d + 3) === months[i]) {
                    mon = i + 1;
                    break;
                }
            }


            if (mon < 10) {
                if (isNaN(val.charAt(d + 3))) {
                    year = val.substring(d + 5, d + 9);
                } else {
                    year = val.substring(d + 4, d + 8);
                }
                mon = "0" + mon;
            }

            if (day.length == 3) {
                result = year + "/" + mon + "/" + day.substring(1, day.length);
            } else {
                result = year + "/" + mon + "/" + day;
            }
            return result;
        }


        function getHeader(headers, index) {
            var header = '';
            $.each(headers, function () {
                if (this.name.toLowerCase() === index.toLowerCase()) {
                    if (index === 'Date') {
                        var tempDate = dateTransfer(this.value.toLowerCase());
                        header = tempDate;
                    } else {
                        header = this.value;
                    }
                }
            });
            return header;
        }

        function getBody(message) {
            var encodedBody = '';
            if (typeof message.parts === 'undefined') {
                encodedBody = message.body.data;
            }
            else {
                encodedBody = getHTMLPart(message.parts);
            }
            encodedBody = encodedBody.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
            return decodeURIComponent(escape(window.atob(encodedBody)));
        }

        function getHTMLPart(arr) {
            for (var x = 0; x <= arr.length; x++) {
                if (typeof arr[x].parts === 'undefined') {
                    if (arr[x].mimeType === 'text/html') {
                        return arr[x].body.data;
                    }
                }
                else {
                    return getHTMLPart(arr[x].parts);
                }
            }
            return '';
        }



        /*
      document.getElementById("template").addEventListener('click', function () {
          location.replace("../appconnection/categorybrowsing");
      });*/

        /*  document.getElementById("refresh").addEventListener('click', function () {
              refreshInbox();
          });*/
    </script>
    <script src="https://apis.google.com/js/client.js?onload=handleClientLoad"></script>
</body>